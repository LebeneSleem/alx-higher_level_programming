"""
Test Case 0: Import
>>> MyList = __import__('1-my_list').MyList

Test Case 1: Common Case
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

Test Case 2: Undefined Object
>>> MyList = __import__('1-my_list').MyList
>>> my_list2.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_list2' is not defined

Test Case 3: Passed a List
>>> a = [1, 9, 4]
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[1, 4, 9]

Test Case 4: Empty List
>>> a = []
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[]

Test Case 5: Unique Number
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.print_sorted()
[1]
>>> print(my_list)
[1]

Test Case 6: Same Number
>>> my_list2 = MyList()
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.print_sorted()
[1, 1, 1, 1]

Test Case 7: Parent Object
>>> my_list = [1, 2, 3]
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'print_sorted'

Test Case 8: Negative Numbers
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(51)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -1, 1, 5, 51]

Test Case 9: Mixed Data Types
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append('apple')
>>> my_list.append(2.5)
>>> my_list.append(True)
>>> my_list.print_sorted()
[2.5, 3, True, 'apple']

Test Case 10: Sorting with Custom Comparator
>>> class ReverseComparator:
...     def compare(self, a, b):
...         return -1 if a > b else 1 if a < b else 0
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(3)
>>> my_list.append(2)
>>> my_list.append(4)
>>> my_list.print_sorted(comparator=ReverseComparator())
[5, 4, 3, 2, 1]

Test Case 11: Sorting Empty List
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

Test Case 12: List with None Values
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(None)
>>> my_list.append(1)
>>> my_list.append(None)
>>> my_list.append(2)
>>> my_list.print_sorted()
[None, None, 1, 2, 3]

Test Case 13: Reversed Order
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(4)
>>> my_list.append(3)
>>> my_list.append(2)
>>> my_list.append(1)
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
"""

