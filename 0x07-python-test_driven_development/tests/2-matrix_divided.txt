Test Cases for matrix_divided Function:

Using "matrix_divided" function from the "2-matrix_divided.py" file
-------------------------------------

Importing function from the module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Dividing a matrix by a divisor
>>> matrix_divided([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 2)
[[5.0, 10.0, 15.0], [20.0, 25.0, 30.0], [35.0, 40.0, 45.0]]

Invalid matrix with non-numeric element
>>> matrix_divided([[10, 20, "30"], [40, 50, 60], [70, 80, 90]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Invalid matrix with different row sizes
>>> matrix_divided([[10, 20, 30], [40, 50, 60, 70], [80, 90, 100]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Invalid divisor type
>>> matrix_divided([[10, 20, 30], [40, 50, 60], [70, 80, 90]], "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number

Divisor equal to zero
>>> matrix_divided([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

Dividing a matrix by a divisor, rounding to 2 decimal places
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]

Dividing a matrix with negative elements by a negative divisor
>>> matrix_divided([[-10, -20, -30], [-40, -50, -60], [-70, -80, -90]], -2)
[[5.0, 10.0, 15.0], [20.0, 25.0, 30.0], [35.0, 40.0, 45.0]]
